})
output$race_plot <- renderPlot({
plot_data <- filtered_data() %>%
group_by(RACE, TRT01A) %>%
summarize(Count = n(), .groups = "drop")
ggplot(plot_data, aes(x = RACE, y = Count, fill = TRT01A)) +
geom_bar(stat = "identity", position = if (input$stack_bars) "stack" else "dodge") +
labs(
title = if (input$stack_bars) "Counts of Subjects by Race (Stacked by Dose)" else "Counts of Subjects by Race",
x = "Race",
y = "Count",
fill = "Dose (TRT01A)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load dataset
adsl <- read_xpt("data/adsl.xpt")
# Define UI
ui <- fluidPage(
titlePanel("Subject Counts by Race"),
sidebarLayout(
sidebarPanel(
sliderInput(
"mmse_range",
"Select MMSE Range:",
min = min(adsl$MMSETOT, na.rm = TRUE),
max = max(adsl$MMSETOT, na.rm = TRUE),
value = c(min(adsl$MMSETOT, na.rm = TRUE), max(adsl$MMSETOT, na.rm = TRUE))
),
checkboxInput(
"stack_bars",
"Stack by Dose (TRT01A)",
value = FALSE
)
),
mainPanel(
plotOutput("race_plot")
)
)
)
# Define server
server <- function(input, output) {
filtered_data <- reactive({
adsl %>%
filter(MMSETOT >= input$mmse_range[1], MMSETOT <= input$mmse_range[2])
})
output$race_plot <- renderPlot({
plot_data <- filtered_data() %>%
group_by(RACE, TRT01A) %>%
summarize(Count = n(), .groups = "drop")
ggplot(plot_data, aes(x = RACE, y = Count, fill = TRT01A)) +
geom_bar(stat = "identity", position = if (input$stack_bars) "stack" else "dodge") +
labs(
title = if (input$stack_bars) "Counts of Subjects by Race (Stacked by Dose)" else "Counts of Subjects by Race",
x = "Race",
y = "Count",
fill = "Dose (TRT01A)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(dplyr)
library(haven)
library(ggplot2)
# Load dataset
adsl <- read_xpt("data/adsl.xpt")
# Define UI
ui <- fluidPage(
titlePanel("Subject Counts by Race"),
sidebarLayout(
sidebarPanel(
sliderInput(
"mmse_range",
"Select MMSE Range:",
min = min(adsl$MMSETOT, na.rm = TRUE),
max = max(adsl$MMSETOT, na.rm = TRUE),
value = c(min(adsl$MMSETOT, na.rm = TRUE), max(adsl$MMSETOT, na.rm = TRUE))
),
checkboxInput(
"stack_bars",
"Show Stacked by Dose (TRT01A)",
value = FALSE
)
),
mainPanel(
plotOutput("race_plot")
)
)
)
# Define server
server <- function(input, output) {
filtered_data <- reactive({
adsl %>%
filter(MMSETOT >= input$mmse_range[1], MMSETOT <= input$mmse_range[2])
})
output$race_plot <- renderPlot({
# Conditionally aggregate data
if (input$stack_bars) {
# Group by Race and TRT01A for stacked view
plot_data <- filtered_data() %>%
group_by(RACE, TRT01A) %>%
summarize(Count = n(), .groups = "drop")
ggplot(plot_data, aes(x = RACE, y = Count, fill = TRT01A)) +
geom_bar(stat = "identity", position = "stack") +
labs(
title = "Counts of Subjects by Race (Stacked by Dose)",
x = "Race",
y = "Count",
fill = "Dose (TRT01A)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
} else {
# Group by Race only for totals
plot_data <- filtered_data() %>%
group_by(RACE) %>%
summarize(Count = n(), .groups = "drop")
ggplot(plot_data, aes(x = RACE, y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(
title = "Counts of Subjects by Race",
x = "Race",
y = "Count"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(
titlePanel("Subject Counts by Race"),
sidebarLayout(
sidebarPanel(
sliderInput(
"mmse_range",
"Select MMSE Range:",
min = min(adsl$MMSETOT, na.rm = TRUE),
max = max(adsl$MMSETOT, na.rm = TRUE),
value = c(min(adsl$MMSETOT, na.rm = TRUE), max(adsl$MMSETOT, na.rm = TRUE))
),
checkboxInput(
"stack_bars",
"Show Stacked by Dose (TRT01A)",
value = FALSE
)
),
mainPanel(
plotOutput("race_plot")
)
)
)
library(shiny)
library(dplyr)
library(haven)
library(ggplot2)
# Load dataset
adsl <- read_xpt("data/adsl.xpt")
# Define UI
ui <- fluidPage(
titlePanel("Subject Counts by Race"),
sidebarLayout(
sidebarPanel(
sliderInput(
"mmse_range",
"Select MMSE Range:",
min = min(adsl$MMSETOT, na.rm = TRUE),
max = max(adsl$MMSETOT, na.rm = TRUE),
value = c(min(adsl$MMSETOT, na.rm = TRUE), max(adsl$MMSETOT, na.rm = TRUE))
),
checkboxInput(
"stack_bars",
"Show Stacked by Dose (TRT01A)",
value = FALSE
)
),
mainPanel(
plotOutput("race_plot")
)
)
)
# Define server
server <- function(input, output) {
filtered_data <- reactive({
adsl %>%
filter(MMSETOT >= input$mmse_range[1], MMSETOT <= input$mmse_range[2])
})
output$race_plot <- renderPlot({
# Conditionally aggregate data
if (input$stack_bars) {
# Group by Race and TRT01A for stacked view
plot_data <- filtered_data() %>%
group_by(RACE, TRT01A) %>%
summarize(Count = n(), .groups = "drop")
ggplot(plot_data, aes(x = RACE, y = Count, fill = TRT01A)) +
geom_bar(stat = "identity", position = "stack") +
labs(
title = "Counts of Subjects by Race (Stacked by Dose)",
x = "Race",
y = "Count",
fill = "Dose (TRT01A)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
} else {
# Group by Race only for totals
plot_data <- filtered_data() %>%
group_by(RACE) %>%
summarize(Count = n(), .groups = "drop")
ggplot(plot_data, aes(x = RACE, y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(
title = "Counts of Subjects by Race",
x = "Race",
y = "Count"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(dplyr)
library(haven)
library(ggplot2)
# Load dataset
adsl <- read_xpt("data/adsl.xpt")
# Define UI
ui <- fluidPage(
titlePanel("Subject Counts by Race"),
sidebarLayout(
sidebarPanel(
sliderInput(
"mmse_range",
"Select MMSE Range:",
min = min(adsl$MMSETOT, na.rm = TRUE),
max = max(adsl$MMSETOT, na.rm = TRUE),
value = c(min(adsl$MMSETOT, na.rm = TRUE), max(adsl$MMSETOT, na.rm = TRUE))
),
radioButtons(
"stack_var",
"Stack By:",
choices = list(
"None (Race Totals)" = "none",
"Dose (TRT01A)" = "TRT01A",
"Age Group (AGEGR1)" = "AGEGR1",
"BMI Group (BMIBLGR1)" = "BMIBLGR1"
),
selected = "none"
)
),
mainPanel(
plotOutput("race_plot")
)
)
)
# Define server
server <- function(input, output) {
filtered_data <- reactive({
adsl %>%
filter(MMSETOT >= input$mmse_range[1], MMSETOT <= input$mmse_range[2])
})
output$race_plot <- renderPlot({
plot_data <- filtered_data()
if (input$stack_var == "none") {
# Group by Race only for totals
plot_data <- plot_data %>%
group_by(RACE) %>%
summarize(Count = n(), .groups = "drop")
ggplot(plot_data, aes(x = RACE, y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(
title = "Counts of Subjects by Race",
x = "Race",
y = "Count"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
} else {
# Group by Race and the selected variable for stacking
plot_data <- plot_data %>%
group_by(RACE, .data[[input$stack_var]]) %>%
summarize(Count = n(), .groups = "drop")
ggplot(plot_data, aes(x = RACE, y = Count, fill = .data[[input$stack_var]])) +
geom_bar(stat = "identity", position = "stack") +
labs(
title = paste("Counts of Subjects by Race (Stacked by", input$stack_var, ")"),
x = "Race",
y = "Count",
fill = input$stack_var
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('Stacked_shiny.R')
runApp('Stacked_shiny.R')
View(adsl)
View(adae)
View(adae)
#| echo: false
library(haven)
library(ggplot2)
library(forcats)
# Read the .xpt file
adae <- read_xpt("data/adae.xpt")
# Example plot: Distribution of a variable (sorted by count)
ggplot(adae, aes(x = fct_infreq(AEDECOD))) +
geom_bar() +
theme_minimal() +
labs(title = "Distribution of Adverse Event Severity",
x = "Severity",
y = "Count") +
coord_flip()  # Optional: Flip the coordinates for better readability
library(shiny)
library(ggplot2)
library(dplyr)
library(haven)
# Read the lab data
adlbc <- read_xpt("data/adlbc.xpt")
# Define the UI
ui <- fluidPage(
titlePanel("Lab Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "param",
label = "Select Lab Variable (PARAM):",
choices = unique(adlbc$PARAM),
selected = unique(adlbc$PARAM)[1]
)
),
mainPanel(
plotOutput(outputId = "linePlot")
)
)
)
# Define the server
server <- function(input, output) {
# Render the line plot
output$linePlot <- renderPlot({
# Filter data based on selected PARAM
filtered_data <- adlbc %>% filter(PARAM == input$param)
# Summarize data to calculate mean AVAL for each VISIT
summarized_data <- filtered_data %>%
group_by(VISIT) %>%
summarise(mean_AVAL = mean(AVAL, na.rm = TRUE)) %>%
arrange(VISIT)
# Create the line plot
ggplot(summarized_data, aes(x = VISIT, y = mean_AVAL)) +
geom_line(group = 1, color = "blue") +
geom_point(color = "blue") +
theme_minimal() +
labs(
title = paste("Mean AVAL for", input$param),
x = "Visit",
y = "Mean AVAL"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
}
# Run the app
shinyApp(ui = ui, server = server)
ataALT <- subset(adlbc, PARAMCD == "ALT")
dataBILI <- subset(adlbc, PARAMCD == "BILI")
byVar <- c("USUBJID", "VISIT")
dataPlot <- merge(
x = dataALT, y = dataBILI[, c(byVar, "LBSTRESN")],
by = c("USUBJID", "VISIT"),
suffixes = c(".ALT", ".BILI"),
all = TRUE
)
library(clinDataReview)
install.packages(c("clinDataReview", "plotly", "clinUtils"))
library(clinDataReview)
library(plotly)
library(clinUtils)
library(clinDataReview)
library(plotly)
library(clinUtils)
ataALT <- subset(adlbc, PARAMCD == "ALT")
dataBILI <- subset(adlbc, PARAMCD == "BILI")
byVar <- c("USUBJID", "VISIT")
dataPlot <- merge(
x = dataALT, y = dataBILI[, c(byVar, "LBSTRESN")],
by = c("USUBJID", "VISIT"),
suffixes = c(".ALT", ".BILI"),
all = TRUE
)
library(clinDataReview)
library(plotly)
library(clinUtils)
adlbc <- read_xpt("data/adlbc.xpt")
library(clinDataReview)
library(plotly)
library(clinUtils)
library(haven)
adlbc <- read_xpt("data/adlbc.xpt")
dataALT <- subset(adlbc, PARAMCD == "ALT")
dataBILI <- subset(adlbc, PARAMCD == "BILI")
byVar <- c("USUBJID", "VISIT")
dataPlot <- merge(
x = dataALT, y = dataBILI[, c(byVar, "LBSTRESN")],
by = c("USUBJID", "VISIT"),
suffixes = c(".ALT", ".BILI"),
all = TRUE
)
labelVars[paste0("LBSTRESN.", c("ALT", "BILI"))] <-
paste(
"Actual value of",
getLabelParamcd(
paramcd = c("ALT", "BILI"), data = dataLB, paramcdVar = "PARAMCD", paramVar = "PARAM"
)
)
library(clinDataReview)
library(plotly)
library(clinUtils)
library(haven)
adlbc <- read_xpt("data/adlbc.xpt")
dataALT <- subset(adlbc, PARAMCD == "ALT")
dataBILI <- subset(adlbc, PARAMCD == "BILI")
byVar <- c("USUBJID", "VISIT")
dataPlot <- merge(
x = dataALT, y = dataBILI[, c(byVar, "LBSTRESN")],
by = c("USUBJID", "VISIT"),
suffixes = c(".ALT", ".BILI"),
all = TRUE
)
labelVars[paste0("LBSTRESN.", c("ALT", "BILI"))] <-
paste(
"Actual value of",
getLabelParamcd(
paramcd = c("ALT", "BILI"), data = adlbc, paramcdVar = "PARAMCD", paramVar = "PARAM"
)
)
library(clinDataReview)
library(plotly)
library(clinUtils)
library(haven)
# Load data
adlbc <- read_xpt("data/adlbc.xpt")
# Subset data for ALT and BILI
dataALT <- subset(adlbc, PARAMCD == "ALT")
dataBILI <- subset(adlbc, PARAMCD == "BILI")
# Merge the two datasets
byVar <- c("USUBJID", "VISIT")
dataPlot <- merge(
x = dataALT,
y = dataBILI[, c(byVar, "LBSTRESN")],
by = c("USUBJID", "VISIT"),
suffixes = c(".ALT", ".BILI"),
all = TRUE
)
# Initialize labelVars as a list
labelVars <- list()
# Add labels for ALT and BILI
labelVars[paste0("LBSTRESN.", c("ALT", "BILI"))] <- paste(
"Actual value of",
getLabelParamcd(
paramcd = c("ALT", "BILI"),
data = adlbc,
paramcdVar = "PARAMCD",
paramVar = "PARAM"
)
)
# Link to patient profiles if interactive session
if (interactive()) {
dataPlot$patientProfilePath <- paste0(
"patientProfiles/subjectProfile-",
sub("/", "-", dataPlot$USUBJID), ".pdf"
)
}
# Create scatterplot per visit
scatterplotClinData(
data = dataPlot,
xVar = "LBSTRESN.ALT",
yVar = "LBSTRESN.BILI",
xLab = getLabelParamcd(
paramcd = "ALT",
data = adlbc,
paramcdVar = "PARAMCD",
paramVar = "PARAM"
),
yLab = getLabelParamcd(
paramcd = "BILI",
data = adlbc,
paramcdVar = "PARAMCD",
paramVar = "PARAM"
),
aesPointVar = list(color = "VISIT", fill = "VISIT"),
xTrans = "log10",
yTrans = "log10",
hoverVars = "USUBJID",
labelVars = labelVars,
table = FALSE,
pathVar = if (interactive()) "patientProfilePath"
)
